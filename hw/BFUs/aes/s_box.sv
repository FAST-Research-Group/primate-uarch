// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// external module sub_bytes_freq

module s_box(	// sub_bytes_freq.scala:18:7
  input         clock,	// sub_bytes_freq.scala:18:7
                reset,	// sub_bytes_freq.scala:18:7
                io_in_valid,	// sub_bytes_freq.scala:19:14
  input  [4:0]  io_in_tag,	// sub_bytes_freq.scala:19:14
  input  [3:0]  io_in_opcode,	// sub_bytes_freq.scala:19:14
  input  [11:0] io_in_imm,	// sub_bytes_freq.scala:19:14
  input  [15:0] io_in_bits,	// sub_bytes_freq.scala:19:14
  output        io_in_ready,	// sub_bytes_freq.scala:19:14
                io_out_valid,	// sub_bytes_freq.scala:19:14
  output [4:0]  io_out_tag,	// sub_bytes_freq.scala:19:14
  output        io_out_flag,	// sub_bytes_freq.scala:19:14
  output [15:0] io_out_bits,	// sub_bytes_freq.scala:19:14
  input         io_out_ready	// sub_bytes_freq.scala:19:14
);

  wire [7:0] _sub_bytes_1_bytes_out;	// sub_bytes_freq.scala:40:27
  wire [7:0] _sub_bytes_bytes_out;	// sub_bytes_freq.scala:40:27
  reg        tag_0;	// sub_bytes_freq.scala:55:22
  reg        valid_flop;	// sub_bytes_freq.scala:62:27
  always @(posedge clock) begin	// sub_bytes_freq.scala:18:7
    if (reset) begin	// sub_bytes_freq.scala:18:7
      tag_0 <= 1'h0;	// sub_bytes_freq.scala:18:7, :55:22
      valid_flop <= 1'h0;	// sub_bytes_freq.scala:18:7, :62:27
    end
    else if (io_out_ready) begin	// sub_bytes_freq.scala:19:14
      tag_0 <= io_in_tag[0];	// sub_bytes_freq.scala:55:22, :56:31
      valid_flop <= io_in_valid;	// sub_bytes_freq.scala:62:27
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// sub_bytes_freq.scala:18:7
    `ifdef FIRRTL_BEFORE_INITIAL	// sub_bytes_freq.scala:18:7
      `FIRRTL_BEFORE_INITIAL	// sub_bytes_freq.scala:18:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// sub_bytes_freq.scala:18:7
      automatic logic [31:0] _RANDOM[0:0];	// sub_bytes_freq.scala:18:7
      `ifdef INIT_RANDOM_PROLOG_	// sub_bytes_freq.scala:18:7
        `INIT_RANDOM_PROLOG_	// sub_bytes_freq.scala:18:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// sub_bytes_freq.scala:18:7
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// sub_bytes_freq.scala:18:7
        tag_0 = _RANDOM[/*Zero width*/ 1'b0][0];	// sub_bytes_freq.scala:18:7, :55:22
        valid_flop = _RANDOM[/*Zero width*/ 1'b0][1];	// sub_bytes_freq.scala:18:7, :55:22, :62:27
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// sub_bytes_freq.scala:18:7
      `FIRRTL_AFTER_INITIAL	// sub_bytes_freq.scala:18:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  sub_bytes_freq sub_bytes (	// sub_bytes_freq.scala:40:27
    .clk       (clock),
    .rst       (reset),
    .en        (io_out_ready),
    .bytes_in  (io_in_bits[7:0]),	// sub_bytes_freq.scala:49:40
    .bytes_out (_sub_bytes_bytes_out)
  );
  sub_bytes_freq sub_bytes_1 (	// sub_bytes_freq.scala:40:27
    .clk       (clock),
    .rst       (reset),
    .en        (io_out_ready),
    .bytes_in  (io_in_bits[15:8]),	// sub_bytes_freq.scala:49:40
    .bytes_out (_sub_bytes_1_bytes_out)
  );
  assign io_in_ready = io_out_ready;	// sub_bytes_freq.scala:18:7
  assign io_out_valid = valid_flop;	// sub_bytes_freq.scala:18:7, :62:27
  assign io_out_tag = {4'h0, tag_0};	// sub_bytes_freq.scala:18:7, :55:22, :57:14
  assign io_out_flag = 1'h0;	// sub_bytes_freq.scala:18:7
  assign io_out_bits = {_sub_bytes_1_bytes_out, _sub_bytes_bytes_out};	// sub_bytes_freq.scala:18:7, :40:27, :52:21
endmodule

