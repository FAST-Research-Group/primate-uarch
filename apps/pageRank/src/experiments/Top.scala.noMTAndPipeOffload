package Tutorial

import Chisel._
import Node._
import Literal._
import scala.collection.mutable.HashMap
import scala.collection.mutable.ArrayBuffer


/*This source implements a PageRank accelerator */
//The module is supposed to work in a distributed environment
//through NIC IO. In our test environment, we have a work distributor
//which gets a piece of work and distribute it among different update
//generators. Update generators generate updates for each piece of work 
//and send them to the Update writers.
//The tester sends only one bulk piece of work to work distributor.
//The work distributor sends a finish signal at the end. 
//Update generators will change the mode after getting the finish
//signal and pass the finish signal. Update writers are also pass the finish 
//signal at the end.

class Top extends Component with include {
  //val io = new gInOutBundle (() => new bulkUpdate_t , () => new prDone_t)
  val io = new gInOutBundle (() => new bulkUpdate_t , () => new update_t)

  val uw = Replicate(MTEngine("updateWriter.c", 1), 8)
  val ug =  Replicate(MTEngine("updateGenerator.c", 1), 4)
  val md = new gComponentMD(() => UFix(width=32) , () => UFix(width=32), 
   ArrayBuffer())
  val cacheMissPipe = (md, () => new gPipe(#NUM_OF_CACHE_MISS_PIPE_STAGES)).
   asInstanceOf[(gComponentMD[Chisel.Data,Chisel.Data], 
   () => gComponent[Chisel.Data,Chisel.Data])]

  val dramBank0 = Engine("dramBank.c")
  val dramBank1 = Engine("dramBank.c")
  val dramBank2 = Engine("dramBank.c")
  val dramBank3 = Engine("dramBank.c")
  val dramBank4 = Engine("dramBank.c")
  val dramBank5 = Engine("dramBank.c")
  val dramBank6 = Engine("dramBank.c")
  val dramBank7 = Engine("dramBank.c")
  val dram = MTEngine("dram.c", 10)
  val dramOffs = ArrayBuffer((dramBank0, "dramBank0"), (dramBank1, "dramBank1"), (dramBank2, "dramBank2"), (dramBank3, "dramBank3"), (dramBank4, "dramBank4"), (dramBank5, "dramBank5"), (dramBank6, "dramBank6"), (dramBank7, "dramBank7"))
  val dramPlus = Offload(dram, dramOffs)

  val cache = MTEngine("cache.c", 10)
  val cachePlus = Offload(cache, ArrayBuffer((cacheMissPipe, "cacheMissPipe"), (dramPlus, "dram"))) 
  val mem1 = cachePlus 
  val mem2 = cachePlus 
  //val myLock = lock(1024)
  val myLock = PipeEngine("lockModel.c")
  val add = FPDPAdder()
  val mul = FPDPMultiplier()
  val div = FPDPDivider()
  val rcOffs = ArrayBuffer((mul, "mul"), (div, "div"))
  val rc = Offload(PipeEngine("rankCalculator.c"), rcOffs) 
  val ugPlus = Offload(Offload(ug, rc, "rankCalc"), mem1, "mem")
  val ab = ArrayBuffer((myLock, "lock"), (add, "add"))
  val uwPlus = Offload(Offload(uw, ab), mem2, "mem")
  val result = Chain(ugPlus, uwPlus)   
}
